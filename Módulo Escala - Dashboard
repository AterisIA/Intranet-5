Crie um macro item de menu chamado "Escalas", dentro dele crie um subitem chamado Dashboard em React com TypeScript que exibe métricas e análises de comunicações e respostas. A página deve ser totalmente funcional e independente, sem necessidade de autenticação ou outras dependências externas além do Supabase.

Estrutura de Arquivos: Crie os seguintes arquivos: src/pages/Dashboard.tsx como página principal, src/types/dashboard.ts para interfaces TypeScript, src/hooks/useDashboardData.tsx para lógica de busca de dados, src/components/dashboard/DashboardFilters.tsx para filtros de data e visualização, src/components/dashboard/KPICards.tsx para cards de métricas principais, src/components/dashboard/Charts/PresenceLineChart.tsx para gráfico de linha temporal, src/components/dashboard/Charts/StatusPieChart.tsx para gráfico de pizza de status, src/components/dashboard/Charts/EntityBarChart.tsx para gráfico de barras de ranking, src/components/dashboard/DataTables/TopPerformersTable.tsx para tabela de top performers, src/components/dashboard/StatusMatrixView.tsx para visão matricial de status.

Tipos TypeScript em src/types/dashboard.ts: DashboardViewType como união de strings 'all', 'coordenador', 'empresa', 'plantao'. DashboardFilters com propriedades startDate tipo Date, endDate tipo Date, viewType tipo DashboardViewType. CommunicationResponse com idresposta número, idescala número, idcomunicacao número, status string, dtcomunicacao string, dtresposta opcional string, horaresposta opcional string. KPIMetric com id string, title string, value número, change número, changeType sendo 'positive', 'negative' ou 'neutral', suffix opcional string, prefix opcional string. PresenceDataPoint com date string, confirmado número, atraso número, falta número, aguardando número. StatusDistribution com name string, value número, color string. EntityRanking com id número, name string, confirmados número, total número, percentage número. DashboardInsight com id string, type sendo 'warning', 'success', 'info' ou 'alert', title string, description string, action opcional string. TopPerformer com id string, name string, entity string, presencaRate número, totalDays número, presentDays número.

Hook useDashboardData em src/hooks/useDashboardData.tsx: Recebe filters do tipo DashboardFilters e retorna objeto com loading booleano, error string ou null, kpis array de KPIMetric, presenceData array de PresenceDataPoint, statusDistribution array de StatusDistribution, entityRanking array de EntityRanking, insights array de DashboardInsight, topPerformers array de TopPerformer, e função refetch. Função fetchDashboardData busca dados da tabela resposta_comunicacao filtrando por dtcomunicacao entre startDate e endDate dos filtros. Calcula KPIs incluindo taxa de resposta como percentual de respostas não aguardando sobre total, taxa de confirmação como percentual de status igual a 1 sobre total respondido, total de comunicações, e pendências contando status Aguardando. Para status distribution conta quantidades de status 1 como Confirmado com cor verde HSL 142 75% 50%, status 2 como Atraso com cor amarela HSL 38 92% 50%, status 3 como Falta com cor vermelha HSL 0 84% 60%, e status Aguardando com cor cinza HSL 240 4% 46%. Agrupa dados por data para criar série temporal com confirmado, atraso, falta e aguardando por dia. Busca dados da tabela escala usando ids únicos de idescala das respostas. Dependendo do viewType busca dados de coordenador, plantao ou empresa usando as respectivas tabelas e relacionamentos. Para ranking agrupa por entidade selecionada contando confirmados e total calculando percentual, ordena por percentual decrescente e pega top 10. Para top performers faz o mesmo mas inclui nome da entidade e taxas. Gera insights simples como sucesso se taxa resposta maior ou igual 90%, warning se menor que 70%, alert se pendências maiores que 20% do total. useEffect dispara fetchDashboardData quando startDate, endDate ou viewType mudam.

Componente Dashboard em src/pages/Dashboard.tsx: Usa useState para filters inicializando startDate como 30 dias atrás usando subDays do date-fns e endDate como hoje, viewType como coordenador. Usa useState para viewMode podendo ser charts ou matrix iniciando em charts. Chama useDashboardData passando filters e desestrutura todos os retornos. Se error renderiza Alert variant destructive com ícone AlertCircle, título Erro ao carregar dashboard, descrição mostrando error e botão com ícone RefreshCw para chamar refetch. Renderiza div principal com padding responsivo 4 em mobile e 6 em desktop, espaçamento vertical de 6, largura máxima de 1600px centralizado. Header com flexbox entre título Dashboard Avançado tamanho 3xl negrito e descrição em text-muted-foreground dizendo Histórico de comunicações e desempenho de respostas. Ao lado direito dois botões, um para charts com ícone BarChart3 e outro para matrix com ícone LayoutGrid, alternando viewMode e variant entre default e outline. Renderiza DashboardFilters passando filters e onFiltersChange como setFilters. Se viewMode é matrix renderiza StatusMatrixView passando filters. Senão se loading renderiza Skeleton com grid de 4 cards de altura 32 e grid de 2 skeletons de altura 400. Senão renderiza KPICards com metrics sendo kpis, grid com PresenceLineChart data sendo presenceData ocupando 2 colunas em large e StatusPieChart data sendo statusDistribution ocupando 1 coluna, EntityBarChart data sendo entityRanking, e TopPerformersTable data sendo topPerformers.

Componente DashboardFilters em src/components/dashboard/DashboardFilters.tsx: Recebe props filters e onFiltersChange. Renderiza div flex responsivo com gap 4, padding 4, fundo card, borda arredondada e sombra. Três seções flex-1: primeira para Visualização com Select value sendo viewType, onValueChange atualizando filters, SelectTrigger com ícone Filter, SelectContent com SelectItem para all texto Todas as Escalas, coordenador texto Por Coordenador, empresa texto Por Empresa, plantao texto Por Plantão. Segunda seção para Data Início com Popover, PopoverTrigger sendo Button variant outline com ícone CalendarIcon, texto formatado com format do date-fns usando locale ptBR ou texto Selecione se não houver data, PopoverContent com Calendar mode single selected sendo startDate, onSelect atualizando filters. Terceira seção idêntica para Data Fim usando endDate.

Componente KPICards em src/components/dashboard/KPICards.tsx: Recebe props metrics array de KPIMetric. Função getIcon retorna ícone TrendingUp com classe text-success para positive, TrendingDown com text-destructive para negative, Minus com text-muted-foreground para neutral. Função getChangeColor retorna text-success para positive, text-destructive para negative, text-muted-foreground para neutral. Renderiza grid responsivo 1 coluna em mobile, 2 em small, 4 em large com gap 4. Para cada metric renderiza Card com hover shadow, CardHeader com padding bottom 2 e CardTitle tamanho sm peso medium cor muted-foreground, CardContent com flex baseline entre div texto 3xl negrito mostrando prefix, value com toFixed usando 1 se suffix for % senão 0, e suffix, e div flex com ícone e span mostrando Math.abs de change com toFixed 1 e suffix, usando cor apropriada.

Componente PresenceLineChart em src/components/dashboard/Charts/PresenceLineChart.tsx: Recebe props data array de PresenceDataPoint. Formata data mapeando cada ponto para incluir date formatado como dd/MM usando format e parseISO do date-fns com locale ptBR. Renderiza Card ocupando col-span-1 em mobile e lg:col-span-2 em large, CardHeader com CardTitle Evolução das Respostas, CardContent com ResponsiveContainer largura 100% altura 300 envolvendo LineChart data sendo formattedData. CartesianGrid com strokeDasharray 3 3 e stroke hsl(var(--border)). XAxis dataKey date com stroke hsl(var(--muted-foreground)) fontSize 12px. YAxis com stroke e fontSize iguais. Tooltip com contentStyle backgroundColor hsl(var(--card)), border 1px solid hsl(var(--border)), borderRadius 6px. Legend. Quatro Line type monotone: confirmado stroke HSL 142 75% 50% name Confirmado strokeWidth 2, atraso stroke HSL 38 92% 50% name Atraso strokeWidth 2, falta stroke HSL 0 84% 60% name Falta strokeWidth 2, aguardando stroke HSL 240 4% 46% name Aguardando strokeWidth 2.

Componente StatusPieChart em src/components/dashboard/Charts/StatusPieChart.tsx: Recebe props data array de StatusDistribution. Renderiza Card, CardHeader com CardTitle Distribuição por Status, CardContent com ResponsiveContainer largura 100% altura 300 envolvendo PieChart. Pie data sendo data, cx 50%, cy 50%, labelLine false, label mostrando name e percent formatado como percentual com toFixed 0, outerRadius 80, fill padrão, dataKey value. Para cada entry em data Cell com key cell-index e fill sendo entry.color. Tooltip com contentStyle igual ao LineChart. Legend.

Componente EntityBarChart em src/components/dashboard/Charts/EntityBarChart.tsx: Recebe props data array de EntityRanking e title opcional string padrão Top 10 Escalas por Taxa de Confirmação. Pega top 10 usando slice. Renderiza Card, CardHeader com CardTitle sendo title, CardContent com ResponsiveContainer largura 100% altura 300 envolvendo BarChart data sendo topData layout vertical. CartesianGrid strokeDasharray 3 3 stroke hsl(var(--border)). XAxis type number stroke hsl(var(--muted-foreground)) fontSize 12px. YAxis type category dataKey name width 100 stroke e fontSize iguais. Tooltip com contentStyle igual anterior e formatter mostrando value com toFixed 1 e símbolo %. Bar dataKey percentage fill hsl(var(--primary)) radius array 0, 4, 4, 0.

Componente TopPerformersTable em src/components/dashboard/DataTables/TopPerformersTable.tsx: Recebe props data array de TopPerformer. Função getBadgeColor retorna bg-success text-success-foreground se rate maior ou igual 90, bg-primary text-primary-foreground se maior ou igual 75, bg-warning text-warning-foreground se maior ou igual 60, bg-destructive text-destructive-foreground caso contrário. Renderiza Card col-span-1 lg:col-span-2, CardHeader com CardTitle Top Performers, CardContent com Table. TableHeader com TableRow contendo TableHead para # com width 12, Nome, Entidade, Dias Presentes com text-right, Total Dias com text-right, Taxa com text-right. TableBody renderiza se data length 0 TableRow com TableCell colSpan 6 text-center text-muted-foreground dizendo Nenhum dado disponível. Senão mapeia data com index mostrando TableRow com TableCell font-medium para index mais 1, performer.name font-medium, performer.entity, performer.presentDays text-right, performer.totalDays text-right, Badge com className getBadgeColor de presencaRate mostrando presencaRate com toFixed 1 e símbolo %.

Componente StatusMatrixView em src/components/dashboard/StatusMatrixView.tsx: Recebe props filters tipo DashboardFilters. Interface MatrixRow com entityId string, entityName string, periods objeto chave string valor objeto com ok número total número percentage número, totalPercentage número. useState para loading iniciando true, error iniciando null, matrixData array de MatrixRow iniciando vazio, periods array de string iniciando vazio. useEffect dispara fetchMatrixData quando filters muda. Função fetchMatrixData busca resposta_comunicacao filtrando por dtcomunicacao entre startDate e endDate. Pega escalaIds únicos das respostas, busca escala incluindo idescala, nomepessoaescala, id_coordenador, id_plantao, dataescala usando in de escalaIds. Pega coordenadorIds e plantaoIds únicos. Busca coordenador com id_coordenador e nome, plantao com id_plantao, nome, id_empresa, e empresa com id_empresa e nome. Cria Maps para coordenadoresMap, plantoesMap, empresasMap. Mapeia respostas incluindo escala, coordenador, plantao e empresa criando respostasWithEscala. Chama processMatrixData passando respostasWithEscala e seta matrixData com rows e periods com periods retornados. Função processMatrixData cria dataMap tipo Map de string para MatrixRow e periodsSet tipo Set de string. Itera respostas determinando entityId e entityName baseado em viewType: coordenador usa escala.coordenador.id_coordenador e nome, plantao usa escala.plantao.id_plantao e nome, empresa usa escala.plantao.empresa.id_empresa e nome. Extrai hour de dataescala criando periodKey como horas h adicionando a periodsSet. Inicializa entity em dataMap se não existir. Inicializa period em row.periods se não existir com ok 0 total 0 percentage 0. Incrementa total e se status for 1 incrementa ok. Calcula percentages para cada period como ok dividido por total vezes 100, calcula totalPercentage somando todos ok e total. Retorna objeto com rows array ordenado e periods array ordenado numericamente. Função getCellColor retorna bg-green-500 se percentage maior ou igual 80 senão bg-red-500. Função getTotalColor retorna bg-green-400 se maior ou igual 80, bg-yellow-400 se maior ou igual 50, bg-red-400 caso contrário. Se loading renderiza Skeleton altura 400. Se error renderiza Alert variant destructive com ícone AlertCircle e descrição error. Se matrixData vazio renderiza Card com CardContent padding vertical 8 e texto center muted-foreground dizendo Nenhum dado disponível. Renderiza Card, CardHeader com CardTitle Visão Rápida de Status, CardContent com div overflow-x-auto contendo table largura full border-collapse. thead sticky top-0 z-10 com tr, th border p-2 text-left bg-muted font-medium sticky left-0 z-20 mostrando texto baseado em viewType, mapeando periods com th border p-2 text-center bg-muted font-medium min-width 100px mostrando period, th final para Total. tbody mapeia matrixData com tr, td border p-2 font-medium bg-background sticky left-0 z-10 mostrando entityName, mapeia periods mostrando td com periodData se existir mostrando percentage toFixed 0 com % e className getCellColor de percentage text-white font-semibold senão mostra traço em td bg-muted/50, td final mostrando totalPercentage toFixed 0 com % e className getTotalColor text-white font-bold.

Integração Supabase: Importa supabase de @/integrations/supabase/client. Usa tabelas resposta_comunicacao com colunas idresposta, idescala, idcomunicacao, status, dtcomunicacao, dtresposta, horaresposta. Tabela escala com colunas idescala, nomepessoaescala, id_coordenador, id_plantao, dataescala. Tabela coordenador com id_coordenador e nome. Tabela plantao com id_plantao, nome, id_empresa. Tabela empresa com id_empresa e nome. Todas as consultas usam supabase.from().select() com filtros apropriados.

Estilos e UI: Usa componentes shadcn ui incluindo Card CardHeader CardTitle CardContent, Button, Select SelectTrigger SelectValue SelectContent SelectItem, Popover PopoverTrigger PopoverContent, Calendar, Table TableHeader TableRow TableHead TableBody TableCell, Badge, Skeleton, Alert AlertDescription AlertTitle. Ícones de lucide-react incluindo Calendar, Filter, TrendingUp, TrendingDown, Minus, AlertCircle, RefreshCw, LayoutGrid, BarChart3, AlertTriangle, CheckCircle, Info. Usa date-fns para format, parseISO, subDays com locale ptBR. Gráficos usando recharts incluindo LineChart Line, PieChart Pie Cell, BarChart Bar, com XAxis YAxis CartesianGrid Tooltip Legend ResponsiveContainer. Cores HSL usando variáveis CSS do tema como hsl(var(--card)), hsl(var(--border)), hsl(var(--muted-foreground)), hsl(var(--primary)). Classes Tailwind responsivas usando prefixos sm, md, lg. Layout flexível com gap, padding, margin, grid com colunas responsivas. Estados de loading com Skeleton, error com Alert variant destructive, dados vazios com mensagens centralizadas.
