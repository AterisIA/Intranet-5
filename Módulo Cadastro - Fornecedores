[Nota: Intranet - Módulo Cadastro - Fornecedores]

[Nota: Onde]
Dentro do item de menu chamado “Cadastro”, crie um subitem chamado “Fornecedores”. Ao clicar em “Fornecedores”, abrir uma página chamada “Fornecedores”, seguindo o padrão visual dos demais módulos utilizando shadcn/ui.

[Nota: O que]
Apresentar a tabela de listagem dos fornecedores com as colunas “CNPJ”, “Razão Social”, “Apelido” e “Ações”, todas ordenáveis; o título da coluna “Ações” deve ficar centralizado e alinhado visualmente entre os ícones e, na própria coluna, exibir diretamente os ícones de Visualizar, Editar e Excluir (sem menu de três pontos).
A listagem deve reagir a changes em filters, search e sort providos por useTableFilters e atualizar automaticamente após criar, editar ou excluir; utilizar consistentemente componentes shadcn/ui, integrar os date range pickers de criação/atualização ao useTableFilters, exibir toasts e loaders para criar, editar, excluir e enviar mensagem e garantir acessibilidade com foco de teclado e aria-labels nos controles e ícones de ação. A página deve exibir um botão “Novo Fornecedor”.

[Nota: Ordenação]
A ordenação deve usar o estado sort de useTableFilters, com ícone de ordenação ao lado do título da coluna, alternando entre crescente e decrescente ao clicar e atualizando o estado.

[Nota: Filtros]
Acima da tabela, incluir um container TableFilters controlado pelos hooks useTableFilters e useFilterOptions; dentro dele:

um TableSearchInput que faz busca geral (em CNPJ/Razão Social/Apelido) e filtra automaticamente enquanto o usuário digita, sem botão de aplicar;

Exibir chips dos filtros ativos (por exemplo, “CNPJ válido ×”, “Criados este mês ×”, intervalos de datas), cada chip removível individualmente;

ação “Limpar tudo” integrada ao estado de useTableFilters;

quaisquer filtros adicionais — como Data de Criação e Data de Atualização — devem ser registrados em useTableFilters e expostos no TableFilters por meio de date range pickers, refletindo nos chips; toda aplicação ou remoção de filtro deve atualizar instantaneamente a listagem.

[Nota: Exibir chips para barra de pesquisa]
Em TableSearchInput também deve renderizar os chips dos filtros ativos expostos por useTableFilters (por exemplo, “Financeiro: pendente ×”, “SP ×”), enquanto o usuário digita.

[Nota: Abas das opções criar, editar e visualizar]
Ao criar, editar ou visualizar um Fornecedor será aberto um pop-up reutilizável com as abas: Dados, Locais, Fiscal, Contatos, Financeiro, Sistema e Mensagens.

[Nota: Aba Dados]
Campos:

CNPJ (texto, máscara/validação) — obrigatório

Razão Social (texto) — obrigatório

Apelido (texto) — obrigatório
Regras da aba: validação via react-hook-form + Zod; foco de teclado; aria-label nos controles; mensagens de erro claras; ao salvar, toast de sucesso/erro e atualização da listagem.

[Nota: Aba Locais]

Lista de Locais para selecionar (somente visualização/seleção) com colunas: Nome, Cliente (se aplicável), Empresa (se aplicável), Tipo, Cidade/Estado.

Ênfase: não exibir coluna “Ações” nesta tabela e não renderizar botões de “Novo Local” (não criar/editar/excluir).

O usuário pode apenas visualizar os locais existentes e selecionar um ou mais locais para vincular ao Fornecedor, conforme a regra de negócio.

As seleções devem refletir-se em chips/estado controlado e validar consistência antes de salvar.

[Nota: Aba Fiscal]
Campos:

Inscrição Estadual — texto

Inscrição Municipal — texto

E-mail NFe — e-mail

IBGE Município — seletor/autocomplete (texto ou código)

Fora do Município? — checkbox
Validações: formatos de IE/IM conforme UF (quando aplicável), e-mail NFe válido; IBGE com busca/autocomplete.

[Nota: Aba Contatos]

Lista de Contatos para selecionar (somente visualização/seleção) com colunas: Nome, E-mail, Telefone, Cargo, Cliente (opcional), Local (opcional), Empresa (opcional), Observações.

Ênfase: não exibir coluna “Ações” nesta tabela e não renderizar botões de “Novo Contato” (não criar/editar/excluir).

O usuário pode apenas visualizar os contatos existentes e selecionar um ou mais contatos para vincular ao Fornecedor.

Campos “Cliente/Local/Empresa” funcionam apenas como filtros/escopo de visualização dos contatos existentes.

[Nota: Aba Financeiro]
Campos:

Limite de Crédito — moeda

Matrícula CEI/CNO — texto

Dados Bancários de Recebimento (grupo):

Banco — select/autocomplete

Agência — texto

Conta — texto

CNPJ — texto (validação de CNPJ; quando usado como CNPJ bancário, alinhar nomenclatura no rótulo)

PIX — texto (aceitar chave aleatória/CPF/CNPJ/e-mail)
Regras: máscara e validação dos campos; impedir salvar com dados bancários inconsistentes; feedbacks de erro próximos aos campos.

[Nota: Ações do Formulário]
Botões: “Salvar”, “Salvar e continuar” e “Cancelar”.
“Cancelar” realiza dirty check com diálogo de confirmação antes de descartar alterações.
Ao salvar, exibir toast de sucesso/erro e atualizar automaticamente a listagem e os vínculos selecionados (Locais/Contatos).

[Nota: Aba Sistema]
Na aba "Sistema" que exibe uma timeline técnica dinâmica com histórico do registro em ordem cronológica (mais recentes primeiro) dentro de um ScrollArea de 400px de altura. Cada evento deve ter: coluna esquerda com ícone circular de 40x40px (w-10 h-10) sobre fundo azul semi-transparente (bg-primary/10) e ícone azul (text-primary) de 20px (w-5 h-5) do lucide-react, conectados por linha vertical cinza (bg-border) de 1px que para no último item; coluna direita com título do evento em negrito (font-semibold text-sm), linha de metadados com micro-ícone UserRound (w-3.5 h-3.5) + nome do usuário e micro-ícone CalendarClock + timestamp formatado em português "dd/MM/yyyy 'às' HH:mm" usando date-fns e locale ptBR, tudo em text-xs text-muted-foreground, separados por border-b exceto o último item.
Mapeie os tipos de evento para ícones: "created" usa CirclePlus, "edited" usa PencilLine, "marked" usa Tag, "deleted" usa Trash2, "restored" usa RotateCcw, todos com a mesma cor azul (text-primary e bg-primary/10). A interface TimelineEvent deve ter id (string), type (union dos 5 tipos), user (string), timestamp (Date) e description (string). O componente Timeline recebe array de events, ordena por timestamp decrescente e renderiza cada TimelineItem passando a prop isLast para o último elemento controlar a linha vertical.

[Nota: Aba Mensagens]
Na aba “Mensagens”, crie um sistema de chat colaborativo moderno usando React, TypeScript, Tailwind CSS e componentes shadcn/ui com as seguintes especificações:

ESTRUTURA DE COMPONENTES:

Componente Principal (ChatColaborativo.tsx)

Gerencia estado de mensagens e participantes

Props: recordTitle (título do registro), recordId (ID do registro)

Estado inicial com 4 participantes mockados com avatares do DiceBear

Mensagens iniciais demonstrando funcionalidades de menção

Layout: Container flex vertical sem scroll, distribuindo espaço entre título fixo, área de mensagens com scroll, e input fixo

Lista de Mensagens (MessageList.tsx)

ScrollArea com padding adequado

Mensagens alinhadas à esquerda (outros) e direita (usuário atual)

Cada mensagem contém: avatar circular (40x40px), nome do autor em negrito, timestamp formatado em português (Hoje às HH:mm, Ontem às HH:mm, ou DD/MM/YYYY às HH:mm), bolha de mensagem com bordas arredondadas, conteúdo com suporte a menções destacadas

Mensagens do usuário: fundo azul vibrante, texto branco; outros: fundo cinza claro (muted), texto escuro

Menções (@nome) destacadas com fundo semi-transparente da cor primary

Input de Mensagens (MessageInput.tsx)

Textarea expansível com altura mínima de 80px

Placeholder: "Digite sua mensagem... Use @ para mencionar alguém"

Botão de envio azul com ícone Send do Lucide

Sistema de menções com @: detecta @ e abre popover de sugestões acima do input; filtra por texto; mostra avatar, nome e cargo; ao clicar, insere menção e fecha automaticamente

Hint: "Pressione Enter para enviar, Shift+Enter para nova linha"

Validação de menções ao enviar (apenas usuários válidos)

DESIGN SYSTEM (CSS Variables):

--primary: 217 83% 58%; /* Azul vibrante para mensagens enviadas */
--primary-foreground: 0 0% 100%;
--muted: 240 4.8% 95.9%;  /* Cinza claro para mensagens recebidas */
--muted-foreground: 240 3.8% 46.1%;
--border: 240 5.9% 90%;
--radius: 0.75rem;


[Nota: Final]
