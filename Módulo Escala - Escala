[Nota: Onde]

Dentro do menu "Escalas", crie o submenu chamado "Escalas"

[Nota: O que]

O prompt abaixo é de uma tela já criada em outro projeto, preciso que você replique ela com excelência, mas ignorando a questão de funcionalidades e banco de dados, o foco nesse momento é criação da interface visual. Importante a página seguir o mesmo padrão visual das demais.

Crie uma aplicação React com TypeScript que implemente uma página de gerenciamento de escalas de trabalho. A aplicação deve ser totalmente funcional e independente, sem necessidade de autenticação ou outras telas. Use Vite como bundler, React 18, TypeScript, Tailwind CSS, Shadcn UI components, Supabase como backend e React Hook Form para formulários.

Configure a estrutura de pastas seguindo o padrão src/pages, src/components/ui, src/hooks e src/integrations/supabase. Instale as dependências necessárias incluindo react, react-dom, typescript, vite, tailwindcss, @supabase/supabase-js, lucide-react para ícones, sonner para toasts, react-hook-form, zod para validação, date-fns para manipulação de datas e react-phone-number-input para inputs de telefone.

Implemente a página principal em src/pages/Escalas.tsx que deve listar todas as escalas cadastradas no sistema com capacidade de busca por nome, exibindo cards para cada escala contendo nome da pessoa, data/hora de início e término, telefone quando disponível, status ativa ou finalizada e opções de ações via dropdown menu. A página deve ter um cabeçalho com título Escalas, subtítulo Escalas ativas do sistema e botão Criar Escala no canto superior direito.

Defina as interfaces TypeScript necessárias incluindo Escala com campos idescala number, nomepessoaescala string, dataescala string, finalescala opcional string, telefone opcional string, folgas_datas opcional array de strings, banco_horas_datas opcional array de strings, folgas_dias_semana opcional array de numbers e domingo_mes opcional number. Defina também Coordenador com id_coordenador string e nome string, Plantao com id_plantao string, nome string, id_empresa string e empresa opcional objeto com nome string, e ContatoTerceirizacao com id string, name string, phone opcional string e email opcional string.

Gerencie o estado da aplicação usando useState hooks para escalas array, loading boolean, searchTerm string, isDialogOpen boolean, editingEscala objeto ou null, isCreating boolean, coordenadores array, plantoes array, contatos array, selectedEmpresa string e formData objeto contendo todos os campos do formulário de criação. Use useEffect para carregar dados iniciais ao montar o componente chamando fetchEscalas, fetchCoordenadores, fetchPlantoes e fetchContatos.

Implemente a função fetchEscalas que deve buscar todos os registros da tabela escala no Supabase ordenados por dataescala descendente, tratando erros com toast de erro e atualizando o estado de loading. Implemente fetchCoordenadores buscando da tabela coordenador ordenado por nome, fetchPlantoes buscando da tabela plantao com join na tabela empresa para trazer o nome da empresa junto e fetchContatos buscando da tabela contatos_terceirizacao filtrando por status active ordenado por nome.

Crie a função filteredEscalas que filtra o array de escalas comparando o searchTerm lowercase com nomepessoaescala lowercase. Implemente formatDate que recebe uma string de data e retorna formatado em pt-BR com dia, mês, ano, hora e minuto. Implemente formatDuration que recebe data início obrigatória e data fim opcional, se não houver data fim retorna a data início formatada seguido de hífen e texto Em andamento, caso contrário calcula a diferença em horas e minutos e retorna ambas as datas formatadas com a duração entre parênteses.

Implemente handleEditEscala que recebe uma escala, seta editingEscala com o objeto recebido, isCreating como false e abre o dialog. Implemente handleCreateEscala que reseta formData para valores vazios exceto arrays vazios para folgas_dias_semana e banco_horas_datas, reseta currentBancoData e selectedEmpresa, seta editingEscala para null, isCreating para true e abre o dialog.

Implemente handleToggleDiaFolga que recebe um número representando dia da semana de zero a seis, se o dia já está no array folgas_dias_semana remove ele senão adiciona. Implemente handleAddBancoHoras que verifica se currentBancoData tem valor e não está duplicado no array banco_horas_datas, se válido adiciona a data ao array e limpa currentBancoData. Implemente handleRemoveBancoHoras que recebe uma data e remove ela do array banco_horas_datas.

Implemente handlePlantaoChange que recebe plantaoId string, atualiza formData.id_plantao, busca o plantão correspondente no array plantoes e se encontrar empresa seta selectedEmpresa com o nome da empresa senão limpa selectedEmpresa. Implemente cleanPhoneNumber que remove todos os caracteres não numéricos de uma string de telefone usando regex substituindo tudo que não é dígito por string vazia.

Implemente handleSubmitEscala que valida se nomepessoaescala e dataescala estão preenchidos exibindo toast de erro caso contrário, monta objeto escalaData com todos os campos do formData aplicando cleanPhoneNumber no telefone e convertendo campos vazios para null, faz insert na tabela escala do Supabase, trata erros com toast, em caso de sucesso exibe toast de sucesso, fecha o dialog e recarrega a lista chamando fetchEscalas.

Renderize a página com estrutura div principal com padding 8 e space-y-6, contendo cabeçalho flex com título h1 text-3xl font-bold, parágrafo descritivo text-muted-foreground e botão Criar Escala com ícone Plus à direita. Abaixo renderize Card do shadcn com CardHeader contendo input de busca com ícone Search posicionado absolutamente à esquerda e placeholder Buscar por nome da pessoa.

No CardContent renderize estado de loading mostrando texto Carregando escalas centralizado, ou se não estiver loading e filteredEscalas vazio mostre Nenhuma escala encontrada centralizado, senão mapeie filteredEscalas renderizando para cada escala um div flex com borda rounded-lg hover:bg-muted/50, dentro coloque avatar circular com ícone Users, nome da pessoa em h3 font-semibold text-lg, abaixo div com ícone Clock e texto da duração formatada, abaixo telefone se existir com emoji de telefone, à direita Badge mostrando Finalizada variant secondary se tiver finalescala senão Em andamento variant default, e DropdownMenu com DropdownMenuTrigger sendo Button ghost com ícone MoreHorizontal e DropdownMenuItem com ícone Edit e texto Ver Detalhes que chama handleEditEscala.

Renderize Dialog do shadcn com open controlado por isDialogOpen e onOpenChange setando isDialogOpen, DialogContent com max-w-md, DialogHeader com DialogTitle mostrando Criar Nova Escala se isCreating senão Detalhes da Escala. Se isCreating renderize formulário com espaçamento space-y-4 contendo campo Select para escolher contato da terceirização preenchendo automaticamente nomepessoaescala e telefone ao selecionar, Input type datetime-local para dataescala obrigatório, Input type datetime-local para finalescala opcional, Select para pausa_minutos com opções 72 minutos e 60 minutos mostrando textos 1 hora e 12 minutos e 1 hora respectivamente.

Continue o formulário com Label Dias da Semana de Folga e grid de botões representando Dom Seg Ter Qua Qui Sex Sáb usando valores 0 a 6, cada botão com variant secondary se o dia está em folgas_dias_semana senão outline, ao clicar chama handleToggleDiaFolga. Adicione campo para banco de horas com Input type date controlado por currentBancoData, Botão Adicionar Data que chama handleAddBancoHoras, e abaixo lista das datas adicionadas em Badge com X que chama handleRemoveBancoHoras.

Adicione Select para domingo_mes com opções null Nenhum, 1 Primeiro domingo, 2 Segundo domingo, 3 Terceiro domingo, 4 Quarto domingo mostrando labels descritivos. Adicione PhoneInput da biblioteca react-phone-number-input para telefone com defaultCountry BR e placeholder opcional. Adicione Select para id_coordenador mapeando coordenadores mostrando nome. Adicione Select para id_plantao chamando handlePlantaoChange ao mudar mapeando plantoes mostrando nome, e se selectedEmpresa tiver valor mostre abaixo em texto muted-foreground Empresa: seguido do nome.

Se não isCreating renderize view de detalhes apenas leitura mostrando todos os dados da editingEscala formatados em Labels e valores sem inputs editáveis, incluindo nome da pessoa, datas formatadas, telefone, coordenador, plantão, empresa, dias de folga, banco de horas e domingo do mês.

No final do dialog se isCreating renderize DialogFooter com Button variant outline text

ando Cancelar que fecha dialog e Button primary texto Criar Escala que chama handleSubmitEscala.

Configure Supabase client em src/integrations/supabase/client.ts exportando createClient com sua URL e anon key do projeto. Crie schema do banco de dados com tabela escala contendo colunas idescala serial primary key, nomepessoaescala varchar not null, dataescala timestamp not null, finalescala timestamp nullable, telefone varchar nullable, id_coordenador uuid nullable foreign key para coordenador, id_plantao uuid nullable foreign key para plantao, id_contato_terceirizacao uuid nullable foreign key para contatos_terceirizacao, folgas_dias_semana integer array default vazio, banco_horas_datas date array default vazio, folgas_datas date array default vazio, domingo_mes integer nullable e pausa_minutos integer nullable.

Crie tabela coordenador com id_coordenador uuid primary key default gen_random_uuid, nome text not null e telefone numeric nullable. Crie tabela empresa com id_empresa uuid primary key default gen_random_uuid e nome text not null. Crie tabela plantao com id_plantao uuid primary key default gen_random_uuid, nome text not null e id_empresa uuid not null foreign key para empresa. Crie tabela contatos_terceirizacao com id uuid primary key default gen_random_uuid, name text not null, phone text nullable, email text not null, role text not null, notes text nullable, status text default active not null, created_at timestamptz default now not null e updated_at timestamptz default now not null.

Habilite Row Level Security nas tabelas permitindo select insert update delete para todos os usuários sem autenticação para fins de demonstração. Configure index em dataescala para melhor performance de queries ordenadas.

Estilize a aplicação usando Tailwind CSS configurando no tailwind.config.ts o tema com cores HSL usando variáveis CSS do shadcn, fonte sans usando Inter ou system-ui, borderRadius com variável radius. No index.css defina variáveis CSS para light e dark mode incluindo background, foreground, card, card-foreground, popover, popover-foreground, primary, primary-foreground, secondary, secondary-foreground, muted, muted-foreground, accent, accent-foreground, destructive, destructive-foreground, border, input e ring usando valores HSL apropriados.

Implemente dark mode usando next-themes provider envolvendo toda aplicação com ThemeProvider no main.tsx com atributo class, defaultTheme system e enableSystem true. Use className nos componentes respeitando as variáveis de tema bg-background, text-foreground, bg-card, text-card-foreground, bg-muted, text-muted-foreground, border-border etc para garantir funcionamento em ambos os modos.

Configure react-phone-number-input criando arquivo phone-input.css customizando estilos do componente para integrar com shadcn usando mesmas variáveis de cor, border-radius e spacing. Importe esse CSS no Escalas.tsx após importar o CSS padrão da biblioteca.

Use toast do sonner através do hook useToast customizado que deve estar em src/hooks/use-toast.ts exportando useToast e toast functions, toast deve aceitar objeto com title string, description string opcional e variant opcional podendo ser default ou destructive, exibindo mensagens estilizadas conforme tema.

Implemente componentes shadcn em src/components/ui incluindo button.tsx usando cva para variants default, destructive, outline, secondary, ghost, link com sizes default, sm, lg, icon, input.tsx com className combinando border-input bg-background, label.tsx usando radix-ui label primitive, select.tsx usando radix-ui select primitive, textarea.tsx similar ao input, card.tsx exportando Card CardHeader CardTitle CardContent CardFooter, badge.tsx com variants default, secondary, destructive, outline, dialog.tsx usando radix-ui dialog primitive com overlay animado e content centralizado, dropdown-menu.tsx usando radix-ui dropdown-menu primitive.

Use lucide-react para todos os ícones incluindo Search, Filter, MoreHorizontal, Edit, Calendar, Clock, Users, Plus importando e usando como componentes React com className para tamanho como h-4 w-4 ou h-5 w-5. Configure date-fns para formatação de datas importando apenas funções necessárias como format, parseISO, differenceInHours, differenceInMinutes.

A aplicação deve ser totalmente responsiva usando breakpoints do Tailwind sm md lg xl, em mobile empilhar elementos verticalmente com botões full width, em desktop usar layouts flex e grid apropriados. Garanta acessibilidade usando labels apropriados, aria-labels quando necessário, foco visível em todos elementos interativos e suporte a navegação por teclado.



[Nota: Intranet - Módulo Escala - Escalas]

[Nota: Onde]
Dentro do menu chamado Escalas,no subitem chamado Escalas ataulize a página seguindo o padrão visual dos demais módulos utilizando shadcn/ui. 

[Nota: O que]
Apresentar a tabela de listagem das escalas com as colunas “Nome”, “Data/Hora de Inicio”, Data/Hora de Término e “Ações”, todas ordenáveis; o título da coluna “Ações” deve ficar centralizado e alinhado visualmente entre os ícones e, na própria coluna, exibir diretamente os ícones de Visualizar, Editar e Excluir (sem menu de três pontos).
A listagem deve reagir a changes em filters, search e sort providos por useTableFilters e atualizar automaticamente após criar, editar ou excluir; utilizar consistentemente componentes shadcn/ui, integrar os date range pickers de criação/atualização ao useTableFilters, exibir toasts e loaders para criar, editar, excluir e enviar mensagem e garantir acessibilidade com foco de teclado e aria-labels nos controles e ícones de ação.A página deve exibir um botão “Novo Tipo de Contato”.

[Nota: Ordenação]
A ordenação deve usar o estado sort de useTableFilters, com ícone de ordenação ao lado do título da coluna, alternando entre crescente e decrescente ao clicar e atualiza o estado.

[Nota: Filtros]
Acima da tabela, incluir um container TableFilters controlado pelos hooks useTableFilters e useFilterOptions; dentro dele, um TableSearchInput que faz busca geral em nome/descrição e filtra automaticamente enquanto o usuário digita, sem botão de aplicar; logo abaixo, renderizar os chips dos filtros ativos expostos por useTableFilters (por exemplo, “Técnico ×”, “Ana Costa ×”, intervalos de datas), cada chip removível individualmente; oferecer ação “Limpar tudo” integrada ao estado de useTableFilters; quaisquer filtros adicionais — como Data de Criação e Data de Atualização — devem ser registrados em useTableFilters e expostos no TableFilters por meio de date range pickers, refletindo nos chips, e toda aplicação ou remoção de filtro deve atualizar instantaneamente a listagem. Deve ter um filtro para pesquisar a data de inicio da escala e data de fim da escala, filtros de select para Coordenador e Plantão.

[Nota: Abas das opções criar, editar e visualizar]
Ao criar, editar ou visualizar será aberto um pop-up reutilizável com as seções citadas abaixo.

[Nota: Aba Dados] 
Na secção “Dados”,  deve incluir todos os campos do atual formulário, todos obrigatórios.

[Nota: Aba sistema]
Na aba "Sistema" que exibe uma timeline técnica dinâmica com histórico do registro em ordem cronológica (mais recentes primeiro) dentro de um ScrollArea de 400px de altura. Cada evento deve ter: coluna esquerda com ícone circular de 40x40px (w-10 h-10) sobre fundo azul semi-transparente (bg-primary/10) e ícone azul (text-primary) de 20px (w-5 h-5) do lucide-react, conectados por linha vertical cinza (bg-border) de 1px que para no último item; coluna direita com título do evento em negrito (font-semibold text-sm), linha de metadados com micro-ícone UserRound (w-3.5 h-3.5) + nome do usuário e micro-ícone CalendarClock + timestamp formatado em português "dd/MM/yyyy 'às' HH:mm" usando date-fns e locale ptBR, tudo em text-xs text-muted-foreground, separados por border-b exceto o último item. Mapeie os tipos de evento para ícones: "created" usa CirclePlus, "edited" usa PencilLine, "marked" usa Tag, "deleted" usa Trash2, "restored" usa RotateCcw, todos com a mesma cor azul (text-primary e bg-primary/10). A interface TimelineEvent deve ter id (string), type (union dos 5 tipos), user (string), timestamp (Date) e description (string). O componente Timeline recebe array de events, ordena por timestamp decrescente e renderiza cada TimelineItem passando a prop isLast para o último elemento controlar a linha vertical.

[Nota: Aba Mensagens]
Na aba “Mensagens”, crie um sistema de chat colaborativo moderno usando React, TypeScript, Tailwind CSS e componentes Shadcn/UI com as seguintes especificações:

*ESTRUTURA DE COMPONENTES:*

1. *Componente Principal (ChatColaborativo.tsx)*
   - Gerencia estado de mensagens e participantes
   - Props: recordTitle (título do registro), recordId (ID do registro)
   - Estado inicial com 4 participantes mockados com avatares do DiceBear
   - Mensagens iniciais demonstrando funcionalidades de menção
   - Layout: Container flex vertical sem scroll, distribuindo espaço entre título fixo, área de mensagens com scroll, e input fixo

2. *Lista de Mensagens (MessageList.tsx)*
   - ScrollArea com padding adequado
   - Mensagens alinhadas à esquerda (outros) e direita (usuário atual)
   - Cada mensagem contém:
     * Avatar circular (40x40px)
     * Nome do autor em negrito
     * Timestamp formatado em português (Hoje às HH:mm, Ontem às HH:mm, ou DD/MM/YYYY às HH:mm)
     * Bolha de mensagem com bordas arredondadas
     * Conteúdo com suporte a menções destacadas
   - Mensagens do usuário: fundo azul vibrante, texto branco
   - Mensagens de outros: fundo cinza claro (muted), texto escuro
   - Menções (@nome) destacadas com fundo semi-transparente da cor primary

3. *Input de Mensagens (MessageInput.tsx)*
   - Textarea expansível com altura mínima de 80px
   - Placeholder: "Digite sua mensagem... Use @ para mencionar alguém"
   - Botão de envio azul com ícone Send do Lucide
   - Sistema de menções com @:
     * Detecta @ digitado e abre popover de sugestões acima do input
     * Filtra participantes conforme texto digitado após @
     * Popover mostra avatar, nome e cargo
     * Ao clicar, insere menção completa no texto
     * Fecha automaticamente após seleção
   - Hint: "Pressione Enter para enviar, Shift+Enter para nova linha"
   - Validação de menções ao enviar (apenas usuários válidos)

*DESIGN SYSTEM (CSS Variables):*

```css
--primary: 217 83% 58%; /* Azul vibrante para mensagens enviadas */
--primary-foreground: 0 0% 100%;
--muted: 240 4.8% 95.9%;  /* Cinza claro para mensagens recebidas */
--muted-foreground: 240 3.8% 46.1%;
--border: 240 5.9% 90%;
--radius: 0.75rem;

[Nota: Final]
