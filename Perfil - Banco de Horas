[Nota: Intranet - Módulo Perfil - Banco de Horas]

[Nota: Onde]
Dentro do item de menu chamado **“Perfil”**, crie um subitem chamado **“Banco de Horas”**. Ao clicar em “Banco de Horas”, abrir uma página chamada **“Banco de Horas”**, seguindo o padrão visual dos demais módulos utilizando **shadcn/ui**.

[Nota: O que]
Exibir um **cabeçalho de resumo (KPIs)** seguido por uma **tabela de dias trabalhados** e uma **faixa de filtros** no topo da listagem (sem visão de calendário).

* **Cabeçalho (KPIs em cards)**:

  * **Saldo Atual** (hh:mm) — destaque visual (positivo/negativo).
  * **Horas Acumuladas no Mês** (hh:mm).
  * **Horas Compensadas no Mês** (hh:mm).
  * **Tendência** (variação vs. mês anterior, ícone/indicador).
    Layout: grid responsivo (md: 4 colunas; sm: empilha), **Card**/**CardContent**, ícones sutis (lucide), tipografia clara (números em **text-3xl**).
* **Tabela de Dias Trabalhados** com colunas **“Data”**, **“Entrada”**, **“Saída”**, **“Pausa”** (duração total), **“Total do Dia”** (hh:mm), **“Diferença”** (a mais/menos vs. carga), **“Tipo”** (Normal/Extra/Compensação), **“Observação”** e **“Ações”**.

  * **Data** exibe o dia da semana + data (ex.: “qui, 16/10/2025”).
  * **Entrada/Saída**: exibir faixas (ex.: 08:00–12:00 • 13:00–17:00) ou os horários consolidados configurados.
  * **Pausa**: duração total (ex.: 01:00).
  * **Total do Dia**: soma das faixas.
  * **Diferença**: badge com **“+02:30”** (a mais) ou **“−01:15”** (a menos).
  * **Tipo**: badge de status (cores acessíveis).
  * **Observação**: texto truncado com tooltip.
  * **Ações**: ícones **Visualizar**, **Editar**, **Excluir** (sem menu de três pontos).
    A página pode exibir um botão **“Adicionar Lançamento”** acima da tabela (opcional, para manter consistência visual com outros módulos).

[Nota: Ordenação]
A ordenação deve usar o estado **sort** de **useTableFilters**, com **ícone de ordenação ao lado do título** da coluna (ex.: Data, Total do Dia, Diferença, Tipo), alternando entre **crescente** e **decrescente** ao clicar e atualizando o estado.

[Nota: Filtros]
Acima da tabela, incluir um container **TableFilters** controlado pelos hooks **useTableFilters** e **useFilterOptions**; dentro dele:

* **TableSearchInput** para **busca geral** (em Observação/Projeto/Local, quando aplicável), **filtrando automaticamente enquanto digita**, **sem botão de aplicar**;
* **TableFilterSelect** para **Mês/Ano**, **Tipo** (Normal/Extra/Compensação), **Origem** (Ponto/Ajuste RH/Manual);
* **DateRangePicker** para **intervalo de datas**;
* **Chips dos filtros ativos** (ex.: “Mês: Out/2025 ×”, “Tipo: Extra ×”, intervalo de datas), cada chip **removível individualmente**;
* Ação **“Limpar tudo”** integrada ao estado de **useTableFilters**; toda aplicação ou remoção de filtro deve **atualizar instantaneamente** a listagem.

[Nota: Exibir chips para barra de pesquisa]
Em **TableSearchInput** também deve renderizar os **chips dos filtros ativos** expostos por **useTableFilters** (por exemplo, “Origem: Ponto ×”), **enquanto o usuário digita**.

[Nota: Estilo visual da Tabela]

* Linhas com **hover** sutil (**bg-muted/50**) e cantos **rounded**.
* **Badges** de **Diferença** (positivo/negativo) e **Tipo** com cores acessíveis e rótulos claros (não apenas cor).
* Coluna **Data** com mini-ícone **Calendar**; **Observação** com **tooltip** em *hover*.
* Rodapé opcional com **linha de sumário** do período visível (Total do Dia somado, saldo líquido no período).

[Nota: Abas das opções criar, editar e visualizar]
Ao **clicar** em uma linha da tabela ou no botão **“Adicionar Lançamento”**, abrir um **pop-up reutilizável** (modal) com as **abas**: **Dados**, **Sistema** e **Mensagens**.

[Nota: Aba Dados]
**(Somente UI)** Campos para compor/editar um lançamento:

* **Data** (Date).
* **Faixas de Horário** (lista visual com entradas/saídas — exibir campos de **Entrada** e **Saída**; permitir múltiplas faixas visualmente).
* **Pausa total** (hh:mm).
* **Carga diária de referência** (exibição) e **Diferença calculada** (exibição/badge).
* **Tipo** (Normal/Extra/Compensação) — **radio pills**.
* **Origem** (Ponto/Ajuste RH/Manual) — select.
* **Observação** (textarea curta).
* **Resumo lateral (card)**: **Total do Dia** (hh:mm) e **Diferença** (badge +/−).
  Aparência consistente com **react-hook-form + Zod** (mensagens de erro visuais), foco de teclado, **aria-labels**, **toasts** e **loaders** (apenas UI) ao salvar.

[Nota: Ações do Formulário no Pop-up]
Botões: **“Salvar”**, **“Salvar e continuar”** (mantém modal aberto) e **“Cancelar”**.

* **Cancelar** com *dirty check* (diálogo).
* Ao salvar, a tabela deve refletir visualmente o novo lançamento (UI).

[Nota: Aba Sistema]
Na aba "Sistema" exibir uma **timeline técnica** (estilo padrão) dentro de **ScrollArea 400px**, ordem **mais recentes primeiro**.

* Ícone circular **40x40 (bg-primary/10)** + ícone **lucide text-primary 20px** e linha vertical **bg-border**;
* Título do evento em **font-semibold text-sm**; metadados com **UserRound** + usuário e **CalendarClock** + data formatada **"dd/MM/yyyy 'às' HH:mm"** (**date-fns/ptBR**); **border-b** entre itens (exceto o último).
  Tipos → ícones: **created → CirclePlus**, **edited → PencilLine**, **marked → Tag**, **deleted → Trash2**, **restored → RotateCcw**.
  Interface **TimelineEvent**: **id**, **type** (union 5), **user**, **timestamp** (Date), **description**.

[Nota: Aba Mensagens]
Na aba “Mensagens”, crie um sistema de chat colaborativo moderno usando React, TypeScript, Tailwind CSS e componentes Shadcn/UI com as seguintes especificações:

ESTRUTURA DE COMPONENTES:

Componente Principal (ChatColaborativo.tsx)
Gerencia estado de mensagens e participantes
Props: recordTitle (título do registro), recordId (ID do registro)
Estado inicial com 4 participantes mockados com avatares do DiceBear
Mensagens iniciais demonstrando funcionalidades de menção
Layout: Container flex vertical sem scroll, distribuindo espaço entre título fixo, área de mensagens com scroll, e input fixo

Lista de Mensagens (MessageList.tsx)
ScrollArea com padding adequado
Mensagens alinhadas à esquerda (outros) e direita (usuário atual)
Cada mensagem contém:
Avatar circular (40x40px)
Nome do autor em negrito
Timestamp formatado em português (Hoje às HH:mm, Ontem às HH:mm, ou DD/MM/YYYY às HH:mm)
Bolha de mensagem com bordas arredondadas
Conteúdo com suporte a menções destacadas
Mensagens do usuário: fundo azul vibrante, texto branco
Mensagens de outros: fundo cinza claro (muted), texto escuro
Menções (@nome) destacadas com fundo semi-transparente da cor primary

Input de Mensagens (MessageInput.tsx)
Textarea expansível com altura mínima de 80px
Placeholder: "Digite sua mensagem... Use @ para mencionar alguém"
Botão de envio azul com ícone Send do Lucide
Sistema de menções com @:
Detecta @ digitado e abre popover de sugestões acima do input
Filtra participantes conforme texto digitado após @
Popover mostra avatar, nome e cargo
Ao clicar, insere menção completa no texto
Fecha automaticamente após seleção
Hint: "Pressione Enter para enviar, Shift+Enter para nova linha"
Validação de menções ao enviar (apenas usuários válidos)

DESIGN SYSTEM (CSS Variables):

--primary: 217 83% 58%; /* Azul vibrante para mensagens enviadas */
--primary-foreground: 0 0% 100%;
--muted: 240 4.8% 95.9%;  /* Cinza claro para mensagens recebidas */
--muted-foreground: 240 3.8% 46.1%;
--border: 240 5.9% 90%;
--radius: 0.75rem;



[Nota: Final]
